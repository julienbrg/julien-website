// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5WXctVjyxSuFYbgJtXvJuX
// Component: J1aMmn-Xl7Ok-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 3ediQFjJUCjPp/component
import Footer from "../../Footer"; // plasmic-import: AtE5hVAD66qi_/component

import { useScreenVariants as useScreenVariantscEymp3MlBaxS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CEymp3_mlBaxS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_julien_website.module.css"; // plasmic-import: 5WXctVjyxSuFYbgJtXvJuX/projectcss
import sty from "./PlasmicMerge.module.css"; // plasmic-import: J1aMmn-Xl7Ok-/css

export type PlasmicMerge__VariantMembers = {};
export type PlasmicMerge__VariantsArgs = {};
type VariantPropType = keyof PlasmicMerge__VariantsArgs;
export const PlasmicMerge__VariantProps = new Array<VariantPropType>();

export type PlasmicMerge__ArgsType = {};
type ArgPropType = keyof PlasmicMerge__ArgsType;
export const PlasmicMerge__ArgProps = new Array<ArgPropType>();

export type PlasmicMerge__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  section?: p.Flex<"section">;
  ul?: p.Flex<"ul">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultMergeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMerge__RenderFunc(props: {
  variants: PlasmicMerge__VariantsArgs;
  args: PlasmicMerge__ArgsType;
  overrides: PlasmicMerge__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscEymp3MlBaxS()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xxqFw
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"Contact me if you need to: \n\n"}
                    </React.Fragment>
                    {
                      <ul
                        data-plasmic-name={"ul"}
                        data-plasmic-override={overrides.ul}
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___1BmuD
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Audit"}
                            </span>
                            <React.Fragment>
                              {" the security of your smart contracts.\n"}
                            </React.Fragment>
                          </React.Fragment>
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__vOxuv
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Build "}
                            </span>
                            <React.Fragment>
                              {"a cool Web3 app (DeFi, DAO, NFT, ...) "}
                            </React.Fragment>
                          </React.Fragment>
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__ozPEy
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Train"}
                            </span>
                            <React.Fragment>
                              {
                                " your team on blockchain and decentralization.\n"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__oBt0
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Present"}
                            </span>
                            <React.Fragment>
                              {" your project to crypto investors."}
                            </React.Fragment>
                          </React.Fragment>
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__ygoKm
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Design"}
                            </span>
                            <React.Fragment>
                              {" a relevant marketing strategy."}
                            </React.Fragment>
                          </React.Fragment>
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9OroY
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Schedule a call: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__bzTyA
                        )}
                        component={Link}
                        href={
                          "https://meetings-eu1.hubspot.com/julien-beranger " as const
                        }
                        platform={"nextjs"}
                      >
                        {"https://meetings-eu1.hubspot.com/julien-beranger"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nElement: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___3TaKh
                        )}
                        component={Link}
                        href={
                          "https://matrix.to/#/@julienbrg:matrix.org" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {"https://matrix.to/#/@julienbrg:matrix.org"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nTelegram: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___0Gv0T
                        )}
                        component={Link}
                        href={"https://t.me/julienbrg" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {"https://t.me/julienbrg"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nLinkedIn: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__tq9Jp
                        )}
                        component={Link}
                        href={
                          "https://www.linkedin.com/in/julienberanger/" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {"https://www.linkedin.com/in/julienberanger/"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nTwitter: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__uLSy
                        )}
                        component={Link}
                        href={"https://twitter.com/julienbrg" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {"https://twitter.com/julienbrg"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nEmail: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___7Ddpp
                        )}
                        component={Link}
                        href={"https://mailto:julien@strat.cc" as const}
                        platform={"nextjs"}
                      >
                        {"julien@strat.cc"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nGithub: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___8EcHt
                        )}
                        component={Link}
                        href={"https://github.com/julienbrg" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {"https://github.com/julienbrg"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"\nFull bio: "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__wDtl2
                        )}
                        component={Link}
                        href={"https://julienberanger.com" as const}
                        platform={"nextjs"}
                      >
                        {"julienberanger.com"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yDXxB
                  )}
                >
                  {"Enter some text"}
                </div>
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "section", "ul", "footer"],
  header: ["header"],
  freeBox: ["freeBox", "section", "ul"],
  section: ["section", "ul"],
  ul: ["ul"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  section: "section";
  ul: "ul";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMerge__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMerge__VariantsArgs;
    args?: PlasmicMerge__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMerge__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMerge__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMerge__ArgProps,
          internalVariantPropNames: PlasmicMerge__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMerge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMerge";
  } else {
    func.displayName = `PlasmicMerge.${nodeName}`;
  }
  return func;
}

export const PlasmicMerge = Object.assign(
  // Top-level PlasmicMerge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    ul: makeNodeComponent("ul"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicMerge
    internalVariantProps: PlasmicMerge__VariantProps,
    internalArgProps: PlasmicMerge__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMerge;
/* prettier-ignore-end */
